@page
@{
    ViewData["Title"] = "Tic-Tac-Fido";
}

<div class="static-page-content">
    <h2>Tic-Tac-Fido</h2>
    <div id="gameRoot"></div>
</div>

<script type="text/babel">
    const learnRate = 0.5;
    const discRate = 0.01;

    class Square extends React.Component {
        render() {
            // Highlighting for wins.
            const className = 'square' + (this.props.highlight ? ' highlight' : '');

            return (
                <button className={className} onClick={() => this.props.onClick()}>
                    {this.props.value}
                </button>
            );
        }
    }

    class Board extends React.Component {
        render() {
            return (
                <div>
                    <div className="board-row">
                        <Square highlight={this.props.winningRow && this.props.winningRow != -1 && this.props.winningRow.includes(0)} value={this.props.squares[0]} onClick={() => this.props.onClick(0)} />
                        <Square highlight={this.props.winningRow && this.props.winningRow != -1 && this.props.winningRow.includes(1)} value={this.props.squares[1]} onClick={() => this.props.onClick(1)} />
                        <Square highlight={this.props.winningRow && this.props.winningRow != -1 && this.props.winningRow.includes(2)} value={this.props.squares[2]} onClick={() => this.props.onClick(2)} />
                    </div>
                    <div className="board-row">
                        <Square highlight={this.props.winningRow && this.props.winningRow != -1 && this.props.winningRow.includes(3)} value={this.props.squares[3]} onClick={() => this.props.onClick(3)} />
                        <Square highlight={this.props.winningRow && this.props.winningRow != -1 && this.props.winningRow.includes(4)} value={this.props.squares[4]} onClick={() => this.props.onClick(4)} />
                        <Square highlight={this.props.winningRow && this.props.winningRow != -1 && this.props.winningRow.includes(5)} value={this.props.squares[5]} onClick={() => this.props.onClick(5)} />
                    </div>
                    <div className="board-row">
                        <Square highlight={this.props.winningRow && this.props.winningRow != -1 && this.props.winningRow.includes(6)} value={this.props.squares[6]} onClick={() => this.props.onClick(6)} />
                        <Square highlight={this.props.winningRow && this.props.winningRow != -1 && this.props.winningRow.includes(7)} value={this.props.squares[7]} onClick={() => this.props.onClick(7)} />
                        <Square highlight={this.props.winningRow && this.props.winningRow != -1 && this.props.winningRow.includes(8)} value={this.props.squares[8]} onClick={() => this.props.onClick(8)} />
                    </div>
                </div>
            );
        }
    }

    class Game extends React.Component {
        constructor(props) {
            super(props);
            this.state = {
                squares: Array(9).fill(null),
                history: [
                    Array(9).fill(null),
                ],
                memo: {},
                xIsNext: true,
                moveCount: 0,
                lastMove: [],
                disableClick: false,
                winningRow: null,
            };
        }

        handleClick(i) {
            if(!this.state.disableClick) {
                this.playerMove(i);
            }
        }

        setSquare(i) {
            const squares = this.state.squares.slice();
            
            if (calculateWinner(squares) != null || squares[i] != null) {
                return;
            }

            squares[i] = this.state.xIsNext ? 'X' : 'O';

            // Check whether the bot can even play or not after you.
            let nextFcn = this.state.xIsNext && calculateWinner(squares) == null && isAvailable(squares) ? this.botMove(i) : null;
            
            this.setState({
                squares: squares,
                history: this.state.history.concat([
                    squares
                ]),
                xIsNext: !this.state.xIsNext,
                moveCount: ++this.state.moveCount,
                lastMove: this.state.lastMove.concat(i),
                disableClick: (squares[i] != 'O'),
                winningRow: calculateWinner(squares),
            }, nextFcn);
        }

        playerMove(move) {
            const next = this.state.xIsNext;
            return new Promise(resolve => {
                if(next) this.setSquare(move, this);
            });
        }

        botMove(playerMove) {
            const squares = this.state.squares.slice();
            let moveIndex = 0;

            setTimeout(function() {
                let serializedBoard = this.serializeBoard(squares.slice());

                if(!(serializedBoard in this.state.memo) || (serializedBoard in this.state.memo && Math.max(...this.state.memo[serializedBoard]))) {
                    if(!isAvailable(squares) || this.state.moveCount == 9) return;

                    // Explore a random state.
                    do {
                        moveIndex = Math.floor(Math.random() * Math.floor(8));
                    }    
                    while((squares[moveIndex] != null || moveIndex == playerMove));
                }
                else {
                    // Take the best (max) square based on states visited in past games.
                    moveIndex = this.state.memo[serializedBoard].indexOf(Math.max(...this.state.memo[serializedBoard]));
                }

                this.setSquare(moveIndex);
            }.bind(this), 2000);
        }
        
        newGame() {
            // Because we lifted state up to Game component, resetting state should propagate to Board and Squares.
            if(this.state.winningRow) {
                let newMemo = this.evalRewards(this.state.squares[this.state.winningRow[0]] == 'O');
                console.log(newMemo);
                this.setState({
                    squares: Array(9).fill(null),
                    history: [
                        Array(9).fill(null),
                    ],
                    memo: newMemo,
                    xIsNext: true,
                    moveCount: 0,
                    lastMove: [],
                    disableClick: false,
                    winningRow: null,
                });
            }
        }

        evalRewards(botWon) {
            let botReward = botWon ? 1 : -1;
            let currentHistory = this.state.history.slice();
            let moveHistory = this.state.lastMove.slice();
            let currentBoard = currentHistory.pop();
            let currentMove = moveHistory.pop();
            let memoCopy = JSON.parse(JSON.stringify(this.state.memo));

            do {

                let serializedBoard = this.serializeBoard(currentBoard);

                if(serializedBoard[currentMove] == 'O') {
                    let boardCopy = Array(9).fill(0);
                    
                    if(serializedBoard in memoCopy) {
                        boardCopy = memoCopy[serializedBoard];
                        botReward += (botReward * learnRate);
                        boardCopy[currentMove] += botReward;
                        memoCopy[serializedBoard] = boardCopy;
                    }
                    else {
                        botReward *= learnRate;
                        boardCopy[currentMove] = botReward;
                        memoCopy[serializedBoard] = boardCopy;
                    }
                }
                
                // Next items
                currentBoard = currentHistory.pop();
                currentMove = moveHistory.pop();
                
                // Adjust rates
                botReward *= discRate;
            }
            while(currentHistory.length > 0);
           
            return memoCopy;
        }

        serializeBoard(squares) {
            let i;
            for(i = 0; i < 9; i++) {
                if(squares[i] == null) squares[i] = '-';
            }

            return squares.join('');
        }

        render() {
            const winningRow = this.state.winningRow;
            const winPlayer = winningRow == null ? null : winningRow[0];

            let status;

            if (winningRow == -1) {
                status = 'It\'s a Tie!';
            }
            else if(winningRow != null) {
              if(this.state.squares[winningRow[0]] == 'O') {
                status = 'Fido wins!';
              }
              else {
                status = 'You win!';
              }
            } 
            else {
              status = 'Next player: ' + (this.state.xIsNext ? 'You' : 'FidO');
            }

            return (
                <div className="game">
                    <div className="game-info">
                        <div>{ status }</div>
                    </div>

                    <div>
                        <div className="game-board">
                            <Board 
                                squares={this.state.squares}
                                onClick={(i) => this.handleClick(i)}
                                winningRow={this.state.winningRow}
                            />
                        </div>

                        <br/>

                        <button onClick={ () => this.newGame() }>New Game</button>
                    </div>
                </div>
            );
        }
    }

    // ========================================

    ReactDOM.render(
        <Game />,
        document.getElementById('gameRoot')
    );

    function calculateWinner(squares) {
        const lines = [
                [0, 1, 2],
                [3, 4, 5],
                [6, 7, 8],
                [0, 3, 6],
                [1, 4, 7],
                [2, 5, 8],
                [0, 4, 8],
                [2, 4, 6],
            ];

        for (let i = 0; i < lines.length; i++) {
            const [a, b, c] = lines[i];
            if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
                return lines[i];
            }
        }
        
        if(!isAvailable(squares)) return -1;

        return null;
    }

    function isAvailable(squares) {
        let i = 0;

        for(i = 0; i < 9; i++) {
            if(squares[i] == null) {
                break;
            }

            // If no squares are available, return false.
            if(i == 8) return false;
        }

        return true;
    }

</script>
