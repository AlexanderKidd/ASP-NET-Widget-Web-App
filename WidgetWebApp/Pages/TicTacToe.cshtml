@page
@{
    ViewData["Title"] = "Tic-Tac-Fido";
}

<div class="static-page-content">
    <h2>Tic-Tac-Fido</h2>
    <div id="gameRoot"></div>
</div>

<script type="text/babel">
    class Square extends React.Component {
        render() {
            const className = 'square' + (this.props.highlight ? ' highlight' : '');
            return (
                <button className={className} onClick={() => this.props.onClick()}>
                    {this.props.value}
                </button>
            );
        }
    }

    class Board extends React.Component {
        constructor(props) {
            super(props);
            this.state = {
                squares: Array(9).fill(null),
                xIsNext: true,
            };
        }

        handleClick(i) {
            const squares = this.state.squares.slice();
            
            if (calculateWinner(squares) || squares[i]) {
              return;
            }

            squares[i] = this.state.xIsNext ? 'X' : 'O';

            this.setState({
              squares: squares,
              xIsNext: !this.state.xIsNext,
            });
        }

        render() {
            const winningRow = calculateWinner(this.state.squares);
            const winPlayer = winningRow == null ? null : this.state.squares[winningRow[0]];

            let status;

            if (winPlayer) {
              if(winPlayer == 'O') {
                status = 'Fido wins!';
              }
              else {
                status = winPlayer + ' wins!';
              }
            } 
            else {
              status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'FidO');
            }

            return (
                <div>
                    <div className="status">{status}</div>
                    <div className="board-row">
                        <Square highlight={winningRow && winningRow.includes(0)} value={this.state.squares[0]} onClick={() => this.handleClick(0)} />
                        <Square highlight={winningRow && winningRow.includes(1)} value={this.state.squares[1]} onClick={() => this.handleClick(1)} />
                        <Square highlight={winningRow && winningRow.includes(2)} value={this.state.squares[2]} onClick={() => this.handleClick(2)} />
                    </div>
                    <div className="board-row">
                        <Square highlight={winningRow && winningRow.includes(3)} value={this.state.squares[3]} onClick={() => this.handleClick(3)} />
                        <Square highlight={winningRow && winningRow.includes(4)} value={this.state.squares[4]} onClick={() => this.handleClick(4)} />
                        <Square highlight={winningRow && winningRow.includes(5)} value={this.state.squares[5]} onClick={() => this.handleClick(5)} />
                    </div>
                    <div className="board-row">
                        <Square highlight={winningRow && winningRow.includes(6)} value={this.state.squares[6]} onClick={() => this.handleClick(6)} />
                        <Square highlight={winningRow && winningRow.includes(7)} value={this.state.squares[7]} onClick={() => this.handleClick(7)} />
                        <Square highlight={winningRow && winningRow.includes(8)} value={this.state.squares[8]} onClick={() => this.handleClick(8)} />
                    </div>
                </div>
            );
        }
    }

    class Game extends React.Component {
        render() {
            return (
                <div className="game">
                    <div className="game-board">
                        <Board />
                    </div>
                    <div className="game-info">
                        <div>{/* status */}</div>
                        <ol>{/* TODO */}</ol>
                    </div>
                </div>
            );
        }
    }

    // ========================================

    ReactDOM.render(
        <Game />,
        document.getElementById('gameRoot')
    );

    function calculateWinner(squares) {
        const lines = [
                [0, 1, 2],
                [3, 4, 5],
                [6, 7, 8],
                [0, 3, 6],
                [1, 4, 7],
                [2, 5, 8],
                [0, 4, 8],
                [2, 4, 6],
            ];

        for (let i = 0; i < lines.length; i++) {
            const [a, b, c] = lines[i];
            if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
                return lines[i];
            }
        }

        return null;
    }

</script>
